name: CI

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [ubuntu-latest, macos-latest, windows-latest, self-hosted]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'

      - name: Cache Julia artifacts
        uses: actions/cache@v3
        with:
          path: ~/.julia/artifacts
          key: artifacts-${{ runner.os }}-${{ hashFiles('**/Project.toml') }}-${{ hashFiles('**/Manifest.toml') }}
          restore-keys: artifacts-${{ runner.os }}-

      - name: Cache Julia packages
        uses: actions/cache@v3
        with:
          path: ~/.julia/compiled
          key: compiled-${{ runner.os }}-${{ hashFiles('**/Project.toml') }}-${{ hashFiles('**/Manifest.toml') }}
          restore-keys: compiled-${{ runner.os }}-

      - name: Install package dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'

      - name: Check for CUDA availability
        id: check-cuda
        run: |
          if command -v nvidia-smi &> /dev/null; then
            echo "cuda=true" >> $GITHUB_OUTPUT
          else
            echo "cuda=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        run: |
          julia --project=. -e 'using Pkg; Pkg.test(; test_args=["cuda=${{ steps.check-cuda.outputs.cuda }}"])'
